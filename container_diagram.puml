@startuml Basic sale
header container diagram 
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!include FONTAWESOME/users.puml

Person(users, "Клиенты-пользователи", $sprite="users")
System_Boundary(s1 , "The Store's System") {
    System(subdomain_0, "Web-site")
    System(api, "API-Gateway")
    SystemQueue(Broker, Apache kafka, "Распределенный брокер сообщений")
    System(api_2, "Stuff_API-Gateway")
    System(System, "Stuff_Web-site")
    System_Boundary(s7, "Domain: \nERP System") {
        Container(subdomain_8, "\nDelivery Service", Service, "Сервис осуществления доставки(Внутренний)")
        ContainerDb(db8, Database, Postgre SQL, "Хранит информацию по доставкам")
        Container(subdomain_9, "\nTracking Delivery Service", Service, "Сервис трекинга доставки")
        ContainerDb(db9, Database, Postgre SQL, "Хранит информацию по статусам доставки")
    }
    System_Boundary(s2 , "Domain: \nCatalog of product System") {
        Container(subdomain_1, "\nCatalog Service", Service, "Сервис выбора товаров")
        Container_Boundary(db_cluster, "Reddis Cluster-1") {
            ContainerDb(db1, Database, Postgre SQL/Slave, "Хранит информацию о продаваемой продукции") 
            ContainerDb(db2, Database, Postgre SQL/Master, "Хранит информацию о продаваемой продукции")
            ContainerDb(db3, Database, Postgre SQL/Slave, "Хранит информацию о продаваемой продукции")
            ContainerDb(db4, Database, Postgre SQL/Master,"Хранит информацию о продаваемой продукции")
            ContainerDb(db5, Database, Postgre SQL/Slave, "Хранит информацию о продаваемой продукции")
            ContainerDb(db6, Database, Postgre SQL/Master, "Хранит информацию о продаваемой продукции") 
        }       
        Container(db_r1, Database, "Reddis")
    }
    
    System_Boundary(s3, "Domain: \nOrder System",) {
        Container(subdomain_2, "\nOrder Service", Service, "Сервис Региистрации заказов")
        Container_Boundary(db_cluster-2, "Reddis Cluster-2") {
            ContainerDb(db10, Database, Postgre SQL/Slave, "Хранит информацию о заказах клиентов")
            ContainerDb(db11, Database, Postgre SQL/Master, "Хранит информацию о заказах клиентов")
            ContainerDb(db12, Database, Postgre SQL/Slave, "Хранит информацию о заказах клиентов")
            ContainerDb(db13, Database, Postgre SQL/Master, "Хранит информацию о заказах клиентов")
        }
        Container(db_r2, Database, "Reddis")
    }

    System_Boundary(s4, "Domain: \nInventory System") {
        Container(subdomain_3, "\nStorehouse Service", Service, "Сервис автоматизации складов (Внутренний)")
        ContainerDb(db14, Database, Postgre SQL, "Хранит информацию по товарах на складе") 
    }

    System_Boundary(s5, "Domain: \nCRM System") {
        Container(subdomain_4, "\nNotification Service", Service, "Сервис уведомлений пользователей" )
        Container(subdomain_5, "\nAuthorization Service", Service, "Сервис Регистрации/Авторизации полльзователей в системе")
        ContainerDb(db16, Database, Postgre SQL/Slave, "Хранит Идентификационные данные пользователей")
        ContainerDb(db17, Database, Postgre SQL/Master, "Хранит Идентификационные данные пользователей")
        Container(subdomain_6, "\nProduct support", Service, "Сервис поддержки клиентов")
    }

    System_Boundary(s6, "Domain: \nPayment System") {
        Container(subdomain_7, "\nPayment Service", Service, "Сервис платежей")
        ContainerDb(db7, Database, Postgre SQL, "Хранит информацию о проведенных/отложенных платежах")
    }
}
System_Boundary(s9, "\nIntegration System"){
    Container(subdomain_10, "\nPartner Integration Service", Service, "Сервис интеграции с системой партнеров")
}
System_Boundary(s8, "Partner \nIntegration System") {
    Container(subdomain_11, "\nTracking delivery Service", Service, "Внешняя система партнеров отвечающая за логику доставки пользователю")
}

Person(Stuff, "Персонал-пользователи", $sprite="users")


Rel(users, subdomain_0, "Visits Example.com/Catalog")
Rel(Stuff, System, "Visits Stuff.Example.com/Catalog")
Rel(System, api_2, "Uses", "JSON/REST API")
Rel(subdomain_0, api, "Uses", "JSON/REST API")
Rel_D(api, subdomain_1, "Uses", "JSON/REST API")
Rel_D(subdomain_1, db1, "DBS-модель чтения/SQL")
Rel_D(subdomain_1, db3, "DBS-модель чтения/SQL")
Rel_D(subdomain_1, db5, "DBS-модель чтения/SQL")
Rel_R(subdomain_1, db_r1, "Кэширование данных", "Redis")
Rel_R(subdomain_2, db_r2, "Кэширование данных", "Redis")
Rel(subdomain_2, db10, "DBS-модель чтения/SQL")
Rel(subdomain_2, db12, "DBS-модель чтения/SQL")
Rel(subdomain_8, db8, "DBS-модель чтения/SQL")
Rel(subdomain_9, db9, "DBS-модель чтения/SQL")
Rel(subdomain_5, db16, "DBS-модель чтения/SQL")
Rel(db16, db17, "Uses")
Rel(db10, db11, "Uses")
Rel(db12, db13, "Uses")
Rel_D(db1, db2, "Uses")
Rel_D(db3, db4, "Uses")
Rel_D(db5, db6, "Uses")
Rel_D(subdomain_7, db7, "DBS-модель чтения/SQL")
@enduml